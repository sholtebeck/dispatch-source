package com.mauishuttle.components.editors;

import com.mauishuttle.components.interfaces.MESPageNavigationControllerInterface;
import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WORequest;
import com.webobjects.appserver.WOResponse;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.foundation.NSMutableArray;

@SuppressWarnings("serial")
public abstract class MESNonSynchronizingEditor extends MESEditor {
	
	private MESPageNavigationControllerInterface _navigationController;

	public MESNonSynchronizingEditor(WOContext context) {
        super(context);
    }

	public void sleep() {
		super.sleep();
		setObject(null);
	}
	
	public void addErrorMessage(String errorMessage) {
		navigationController().addErrorMessage(errorMessage);
	}
	
	public void addMessage(String message) {
		navigationController().addMessage(message);
	}

	public EOEditingContext ec() {
		return object().editingContext();
	}
	
	public void setEc(EOEditingContext ec) {
		
	}

	public boolean hasError() {
		return ! navigationController().errors().isEmpty();
	}
	
	public MESPageNavigationControllerInterface navigationController() {
		if(_navigationController == null) {
			_navigationController = (MESPageNavigationControllerInterface)valueForBinding("navigationController");
		}
		return _navigationController;
	}

	public void setNavigationController(MESPageNavigationControllerInterface navigationController) {
		this._navigationController = navigationController;
		//setValueForBinding(navigationController, "navigationController");
	}

	protected void revertChanges() {
		if(ec().hasChanges()) {
			ec().revert();
		}
	}

	public void validationFailedWithException(Throwable t, Object value, String keyPath) {
		navigationController().validationFailedWithException(t, value, keyPath);
	}	
	
	/** component does not synchronize variables */
	public boolean synchronizesVariablesWithBindings() {
		return false;
	}

	/** component is not stateless */
	public boolean isStateless() {
		return false;
	}

	public NSMutableArray<String> errors() {
		return navigationController().errors();
	}
	
	public void setErrors(NSMutableArray<String> errors) {
	//	setValueForBinding(errors, "errors");
	}
	
	public NSMutableArray<String> messages() {
		return navigationController().messages();
	}
	
	public void setMessages(NSMutableArray<String> messages) {
	//	setValueForBinding(messages, "messages");
	}
	
	/**
	 * Calls {@link #resetCachedBindingsInStatefulComponent} prior to super.takeValuesFromRequest.
	 * @param request from which the values will be taken
	 * @param context of the request
	 */
	@Override
	public void takeValuesFromRequest(WORequest request, WOContext context) {
		if (!synchronizesVariablesWithBindings() && !isStateless()) {
			resetCachedBindingsInStatefulComponent();
		}
		super.takeValuesFromRequest(request, context);
	}

	/**
	 * Calls {@link #resetCachedBindingsInStatefulComponent} prior to super.invokeAction.
	 * @param request for which the action is invoked
	 * @param context of the request
	 * @return the result of invoking the action
	 */
	@Override
	public WOActionResults invokeAction(WORequest request, WOContext context) {
		if (!synchronizesVariablesWithBindings() && !isStateless()) {
			resetCachedBindingsInStatefulComponent();
		}
		return super.invokeAction(request, context);
	}

	/**
	 * Calls {@link #resetCachedBindingsInStatefulComponent} prior to super.appendToResponse.
	 * @param response to which we are appending
	 * @param context context of the response
	 */
	@Override
	public void appendToResponse(WOResponse response, WOContext context) {
		if (!synchronizesVariablesWithBindings() && !isStateless()) {
			resetCachedBindingsInStatefulComponent();
		}
		super.appendToResponse(response, context);
	}

	/**
	 * Implements a {@link WOComponent#reset()reset-like} hook for stateful, but non-synchronizing 
	 * components.  This method is called at the beginning of takeValuesFromRequest, invokeAction 
	 * and appendToResponse if the component subclass is non-synchronized but stateful.  If it is
	 * non-synchronized, but stateless, use {@link WOComponent#reset()}.
	 */
	public void resetCachedBindingsInStatefulComponent() {
		if (_dynamicBindings != null) {
			_dynamicBindings.removeAllObjects();
		}
	}	
	
	
}