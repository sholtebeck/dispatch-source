package com.mauishuttle.components.editors;

import com.mauishuttle.eo.MESHubRole;
import com.mauishuttle.eo.MESRole;
import com.mauishuttle.eo.MESUser;
import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSValidation;

@SuppressWarnings("serial")
public class MESRoleEditor extends MESNonSynchronizingEditor {

	private MESRole _role;
	private MESHubRole _hubRole;
	public MESUser _user;
	
	public MESRoleEditor(WOContext context) {
        super(context);
    }

	public void sleep() {
		super.sleep();
		_role = null;
		_hubRole = null;
	}
	
	public MESRole object() {
		
		if(isHubRole()) {
			if(_hubRole == null) {
				_hubRole = (MESHubRole)valueForBinding("object");
			}
			return _hubRole;
		}
		
		if(_role == null) {
			_role = (MESRole)valueForBinding("object");
		}

		return _role;
	
	}

	public void setObject(Object object) throws ClassCastException {
		if(object == null) {
			_role = _hubRole = null;
		} else if (object instanceof MESHubRole) {
			_hubRole = (MESHubRole)object;
		} else if(object instanceof MESRole) {
			_role = (MESRole)object;
		}
	}

	public boolean isHubRole() {
		return valueForBinding("object") instanceof MESHubRole;
	}

	public String hubName() {
		return _hubRole.hub().name();
	}

	public WOActionResults unassignUser() {
	
		try {
			object().removeFromUsersRelationship(_user);
			ec().saveChanges();
			addMessage(RECORD_UPDATE_MESSAGE);
		} catch (NSValidation.ValidationException e) {
			validationFailedWithException(e, null, null);
		}

		return navigationController().nextPage();
		
	}
	
	public NSArray<MESUser> unassignedUsers() {

		NSMutableArray<MESUser> unassignedUsers = MESUser.fetchAllMESUsers(ec()).mutableClone();
		
		for(MESUser aUser : object().users()) {
			unassignedUsers.removeObject(aUser);
		}

		EOSortOrdering.sortArrayUsingKeyOrderArray(unassignedUsers, 
				MESUser.LAST_NAME.asc().then(MESUser.FIRST_NAME.asc()));

		return unassignedUsers;
	
	}

	public boolean assignUser() {
		return object().users().containsObject(_user);
	}

	public void setAssignUser(boolean assignUser) {
		if(assignUser) {
			object().addToUsersRelationship(_user);
		}
	}

	public NSArray<MESUser> assignedUsers() {
		return object().users(null, MESUser.LAST_NAME.asc().then(MESUser.FIRST_NAME.asc()));
	}

}